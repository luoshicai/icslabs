                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4f004000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f64804000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f71004000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | # name :Luo Shicai  ID:520021910605
                            | # Describe how and why you modified the baseline code.
                            | # 1.use iaddq to avoid assigning values every time you use constants. 15.18->12.70
                            | # 2.iaddq $-1,%rdx   andq %rdx,%rdx synthesize one  12.70->11.70
                            | # 3.Loop expansion    11.70->7.93
                            | # 4.Use forwarding to eliminate the stall or bubble between mrmovq and rmmovq 7.93->7.89
                            | # 5.When len<=8 use jumpTable  7.89->7.56 
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop headeri
0x032: c0f2f6ffffffffffffff |         iaddq $-10,%rdx
0x03c: 710602000000000000   |         jle break           #len>10?
                            | #len>10
0x045:                      | handler1:
0x045: 50870000000000000000 |         mrmovq (%rdi),%r8
0x04f: 40860000000000000000 |         rmmovq %r8,(%rsi)
0x059: 6288                 |         andq %r8,%r8
0x05b: 50970800000000000000 |         mrmovq 8(%rdi),%r9
0x065: 40960800000000000000 |         rmmovq %r9,8(%rsi)
0x06f: 718200000000000000   |         jle judge1
0x078: c0f00100000000000000 |         iaddq $1,%rax
0x082:                      | judge1:
0x082: 6299                 |         andq %r9,%r9
0x084: 50a71000000000000000 |         mrmovq 16(%rdi),%r10
0x08e: 40a61000000000000000 |         rmmovq %r10,16(%rsi)
0x098: 71ab00000000000000   |         jle judge2
0x0a1: c0f00100000000000000 |         iaddq $1,%rax
0x0ab:                      | judge2:
0x0ab: 62aa                 |         andq %r10,%r10
0x0ad: 50b71800000000000000 |         mrmovq 24(%rdi),%r11
0x0b7: 40b61800000000000000 |         rmmovq %r11,24(%rsi)        
0x0c1: 71d400000000000000   |         jle judge3
0x0ca: c0f00100000000000000 |         iaddq $1,%rax
0x0d4:                      | judge3:
0x0d4: 62bb                 |         andq %r11,%r11
0x0d6: 50c72000000000000000 |         mrmovq 32(%rdi),%r12
0x0e0: 40c62000000000000000 |         rmmovq %r12,32(%rsi)
0x0ea: 71fd00000000000000   |         jle judge4
0x0f3: c0f00100000000000000 |         iaddq $1,%rax
0x0fd:                      | judge4:
0x0fd: 62cc                 |         andq %r12,%r12
0x0ff: 50d72800000000000000 |         mrmovq 40(%rdi),%r13
0x109: 40d62800000000000000 |         rmmovq %r13,40(%rsi)
0x113: 712601000000000000   |         jle judge5
0x11c: c0f00100000000000000 |         iaddq $1,%rax
0x126:                      | judge5:
0x126: 62dd                 |         andq %r13,%r13
0x128: 50e73000000000000000 |         mrmovq 48(%rdi),%r14
0x132: 40e63000000000000000 |         rmmovq %r14,48(%rsi)
0x13c: 714f01000000000000   |         jle judge6
0x145: c0f00100000000000000 |         iaddq $1,%rax
0x14f:                      | judge6:
0x14f: 62ee                 |         andq %r14,%r14
0x151: 50173800000000000000 |         mrmovq 56(%rdi),%rcx
0x15b: 40163800000000000000 |         rmmovq %rcx,56(%rsi)
0x165: 717801000000000000   |         jle judge7
0x16e: c0f00100000000000000 |         iaddq $1,%rax
0x178:                      | judge7:
0x178: 6211                 |         andq %rcx,%rcx
0x17a: 50874000000000000000 |         mrmovq 64(%rdi),%r8
0x184: 40864000000000000000 |         rmmovq %r8,64(%rsi)
0x18e: 71a101000000000000   |         jle judge8 
0x197: c0f00100000000000000 |         iaddq $1,%rax
0x1a1:                      | judge8:
0x1a1: 6288                 |         andq %r8,%r8
0x1a3: 50a74800000000000000 |         mrmovq 72(%rdi),%r10
0x1ad: 40a64800000000000000 |         rmmovq %r10,72(%rsi)
0x1b7: 71ca01000000000000   |         jle judge9
0x1c0: c0f00100000000000000 |         iaddq $1,%rax
0x1ca:                      | judge9:
0x1ca: 62aa                 |         andq %r10,%r10
0x1cc: 71df01000000000000   |         jle judgeEnd1
0x1d5: c0f00100000000000000 |         iaddq $1,%rax
0x1df:                      | judgeEnd1:
0x1df: c0f75000000000000000 |         iaddq $80,%rdi
0x1e9: c0f65000000000000000 |         iaddq $80,%rsi
0x1f3: c0f2f6ffffffffffffff |         iaddq $-10,%rdx
0x1fd: 764500000000000000   |         jg handler1
                            | 
0x206:                      | break:
0x206: 6022                 |         addq %rdx,%rdx
0x208: 6022                 |         addq %rdx,%rdx
0x20a: 6022                 |         addq %rdx,%rdx
0x20c: 50920404000000000000 |         mrmovq Jump(%rdx),%r9
0x216: a09f                 |         pushq %r9
0x218: 90                   |         ret
                            | 
0x219:                      | last10:
0x219: 50874800000000000000 |         mrmovq 72(%rdi),%r8
0x223: 40864800000000000000 |         rmmovq %r8,72(%rsi)
0x22d: 6088                 |         addq %r8,%r8
0x22f: 714202000000000000   |         jle last9
0x238: c0f00100000000000000 |         iaddq $1,%rax
0x242:                      | last9:
0x242: 50874000000000000000 |         mrmovq 64(%rdi),%r8
0x24c: 40864000000000000000 |         rmmovq %r8,64(%rsi)
0x256: 6088                 |         addq %r8,%r8
0x258: 716b02000000000000   |         jle last8
0x261: c0f00100000000000000 |         iaddq $1,%rax
0x26b:                      | last8:
0x26b: 50873800000000000000 |         mrmovq 56(%rdi),%r8
0x275: 40863800000000000000 |         rmmovq %r8,56(%rsi)
0x27f: 6288                 |         andq %r8,%r8
0x281: 719402000000000000   |         jle last7
0x28a: c0f00100000000000000 |         iaddq $1,%rax
0x294:                      | last7:
0x294: 50873000000000000000 |         mrmovq 48(%rdi),%r8
0x29e: 40863000000000000000 |         rmmovq %r8,48(%rsi)
0x2a8: 6288                 |         andq %r8,%r8
0x2aa: 71bd02000000000000   |         jle last6
0x2b3: c0f00100000000000000 |         iaddq $1,%rax
0x2bd:                      | last6:
0x2bd: 50872800000000000000 |         mrmovq 40(%rdi),%r8
0x2c7: 40862800000000000000 |         rmmovq %r8,40(%rsi)
0x2d1: 6288                 |         andq %r8,%r8
0x2d3: 71e602000000000000   |         jle last5
0x2dc: c0f00100000000000000 |         iaddq $1,%rax
0x2e6:                      | last5:
0x2e6: 50872000000000000000 |         mrmovq 32(%rdi),%r8
0x2f0: 40862000000000000000 |         rmmovq %r8,32(%rsi)
0x2fa: 6288                 |         andq %r8,%r8
0x2fc: 710f03000000000000   |         jle last4
0x305: c0f00100000000000000 |         iaddq $1,%rax
0x30f:                      | last4:
0x30f: 50871800000000000000 |         mrmovq 24(%rdi),%r8
0x319: 40861800000000000000 |         rmmovq %r8,24(%rsi)
0x323: 6288                 |         andq %r8,%r8
0x325: 713803000000000000   |         jle last3
0x32e: c0f00100000000000000 |         iaddq $1,%rax
0x338:                      | last3:
0x338: 50871000000000000000 |         mrmovq 16(%rdi),%r8
0x342: 40861000000000000000 |         rmmovq %r8,16(%rsi)
0x34c: 6288                 |         andq %r8,%r8
0x34e: 716103000000000000   |         jle last2
0x357: c0f00100000000000000 |         iaddq $1,%rax
0x361:                      | last2:
0x361: 50870800000000000000 |         mrmovq 8(%rdi),%r8
0x36b: 40860800000000000000 |         rmmovq %r8,8(%rsi)
0x375: 6288                 |         andq %r8,%r8
0x377: 718a03000000000000   |         jle last1
0x380: c0f00100000000000000 |         iaddq $1,%rax
0x38a:                      | last1:
0x38a: 50870000000000000000 |         mrmovq (%rdi),%r8
0x394: 40860000000000000000 |         rmmovq %r8,(%rsi)
0x39e: 6288                 |         andq %r8,%r8
0x3a0: 710c04000000000000   |         jle Done
0x3a9: c0f00100000000000000 |         iaddq $1,%rax
0x3b3:                      | last0:
0x3b3: 90                   |         ret
                            | 
0x3b4:                      | JumpTable:
0x3b4: b303000000000000     |     .quad last0
0x3bc: 8a03000000000000     |     .quad last1
0x3c4: 6103000000000000     |     .quad last2
0x3cc: 3803000000000000     |     .quad last3
0x3d4: 0f03000000000000     |     .quad last4
0x3dc: e602000000000000     |     .quad last5
0x3e4: bd02000000000000     |     .quad last6
0x3ec: 9402000000000000     |     .quad last7
0x3f4: 6b02000000000000     |     .quad last8
0x3fc: 4202000000000000     |     .quad last9
0x404:                      | Jump:
0x404: 1902000000000000     |     .quad last10
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x40c:                      | Done:
0x40c: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x40d:                      | End:
                            | #/* $end ncopy-ys */
0x40d:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x410:                      | 	.align 8
0x410:                      | src:
0x410: 0100000000000000     | 	.quad 1
0x418: feffffffffffffff     | 	.quad -2
0x420: fdffffffffffffff     | 	.quad -3
0x428: 0400000000000000     | 	.quad 4
0x430: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x440:                      | 	.align 16
0x440:                      | Predest:
0x440: fadebc0000000000     | 	.quad 0xbcdefa
0x448:                      | dest:
0x448: abefcd0000000000     | 	.quad 0xcdefab
0x450: abefcd0000000000     | 	.quad 0xcdefab
0x458: abefcd0000000000     | 	.quad 0xcdefab
0x460: abefcd0000000000     | 	.quad 0xcdefab
0x468:                      | Postdest:
0x468: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x470:                      | .align 8
                            | # Run time stack
0x470: 0000000000000000     | 	.quad 0
0x478: 0000000000000000     | 	.quad 0
0x480: 0000000000000000     | 	.quad 0
0x488: 0000000000000000     | 	.quad 0
0x490: 0000000000000000     | 	.quad 0
0x498: 0000000000000000     | 	.quad 0
0x4a0: 0000000000000000     | 	.quad 0
0x4a8: 0000000000000000     | 	.quad 0
0x4b0: 0000000000000000     | 	.quad 0
0x4b8: 0000000000000000     | 	.quad 0
0x4c0: 0000000000000000     | 	.quad 0
0x4c8: 0000000000000000     | 	.quad 0
0x4d0: 0000000000000000     | 	.quad 0
0x4d8: 0000000000000000     | 	.quad 0
0x4e0: 0000000000000000     | 	.quad 0
0x4e8: 0000000000000000     | 	.quad 0
                            | 
0x4f0:                      | Stack:
