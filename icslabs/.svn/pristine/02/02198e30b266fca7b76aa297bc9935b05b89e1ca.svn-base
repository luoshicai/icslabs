#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
# name :Luo Shicai  UD:520021910605
# Describe how and why you modified the baseline code.
# 1.use iaddq to avoid assigning values every time you use constants. 15.18->12.70
# 2.iaddq $-1,%rdx   andq %rdx,%rdx synthesize one  12.70->11.70
# 3.Loop expansion    11.70->7.93
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop headeri
        iaddq $-8,%rdx
        jge handler1           #len>=8?
        iaddq $4,%rdx          
        jge handler2           #4=<len<8?
to1:
        iaddq $2,%rdx
        jge handler3           #2=<len<4?
to2:
        iaddq $1,%rdx
        je handler4                #len=1?
        ret
#len>=8
handler1:
        mrmovq (%rdi),%r8
        mrmovq 8(%rdi),%r9
        mrmovq 16(%rdi),%r10
        mrmovq 24(%rdi),%r11
        mrmovq 32(%rdi),%r12
        mrmovq 40(%rdi),%r13
        mrmovq 48(%rdi),%r14
        mrmovq 56(%rdi),%rcx
        rmmovq %r8,(%rsi)
        rmmovq %r9,8(%rsi)
        rmmovq %r10,16(%rsi)
        rmmovq %r11,24(%rsi)
        rmmovq %r12,32(%rsi)
        rmmovq %r13,40(%rsi)
        rmmovq %r14,48(%rsi)
        rmmovq %rcx,56(%rsi)
        andq %r8,%r8
        jle judge1
        iaddq $1,%rax
judge1:
        andq %r9,%r9
        jle judge2
        iaddq $1,%rax
judge2:
        andq %r10,%r10
        jle judge3
        iaddq $1,%rax
judge3:
        andq %r11,%r11
        jle judge4
        iaddq $1,%rax
judge4:
        andq %r12,%r12
        jle judge5
        iaddq $1,%rax
judge5:
        andq %r13,%r13
        jle judge6
        iaddq $1,%rax
judge6:
        andq %r14,%r14
        jle judge7
        iaddq $1,%rax
judge7:
        andq %rcx,%rcx
        jle judgeEnd1
        iaddq $1,%rax
judgeEnd1:
        iaddq $64,%rdi
        iaddq $64,%rsi
        jmp ncopy
#4=<len<8
handler2:
        mrmovq (%rdi),%r8
        mrmovq 8(%rdi),%r9
        mrmovq 16(%rdi),%r10
        mrmovq 24(%rdi),%r11
        rmmovq %r8,(%rsi)
        rmmovq %r9,8(%rsi)
        rmmovq %r10,16(%rsi)
        rmmovq %r11,24(%rsi)
        andq %r8,%r8
        jle judge8
        iaddq $1,%rax
judge8:
        andq %r9,%r9
        jle judge9
        iaddq $1,%rax
judge9:
        andq %r10,%r10
        jle judge10
        iaddq $1,%rax
judge10:
        andq %r11,%r11
        jle judgeEnd2
        iaddq $1,%rax
judgeEnd2:
        iaddq $32,%rdi
        iaddq $32,%rsi
        iaddq $-4,%rdx
        jmp to1
#2=<len<4
handler3:
        mrmovq (%rdi),%r8
        mrmovq 8(%rdi),%r9
        rmmovq %r8,(%rsi)
        rmmovq %r9,8(%rsi)
        andq %r8,%r8
        jle judge11
        iaddq $1,%rax
judge11:
        andq %r9,%r9
        jle judgeEnd3
        iaddq $1,%rax
judgeEnd3:
        iaddq $16,%rdi
        iaddq $16,%rsi
        iaddq $-2,%rdx
        jmp to2

handler4:
        mrmovq (%rdi),%r8
        rmmovq %r8,(%rsi)
        andq %r8,%r8
        jle Done
        iaddq $1,%rax
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
