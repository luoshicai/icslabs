#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
# name :Luo Shicai  ID:520021910605
# Describe how and why you modified the baseline code.
# 1.use iaddq to avoid assigning values every time you use constants. 15.18->12.70
# 2.iaddq $-1,%rdx   andq %rdx,%rdx synthesize one  12.70->11.70
# 3.Loop expansion    11.70->7.93
# 4.Use forwarding to eliminate the stall or bubble between mrmovq and rmmovq 7.93->7.89
# 5.When len<=8 use jumpTable  7.89->7.56 
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop headeri
        iaddq $-8,%rdx
        jle break           #len>8?
#len>8
handler1:
        mrmovq (%rdi),%r8
        rmmovq %r8,(%rsi)
        andq %r8,%r8
        mrmovq 8(%rdi),%r9
        rmmovq %r9,8(%rsi)
        jle judge1
        iaddq $1,%rax
judge1:
        andq %r9,%r9
        mrmovq 16(%rdi),%r10
        rmmovq %r10,16(%rsi)
        jle judge2
        iaddq $1,%rax
judge2:
        andq %r10,%r10
        mrmovq 24(%rdi),%r11
        rmmovq %r11,24(%rsi)        
        jle judge3
        iaddq $1,%rax
judge3:
        andq %r11,%r11
        mrmovq 32(%rdi),%r12
        rmmovq %r12,32(%rsi)
        jle judge4
        iaddq $1,%rax
judge4:
        andq %r12,%r12
        mrmovq 40(%rdi),%r13
        rmmovq %r13,40(%rsi)
        jle judge5
        iaddq $1,%rax
judge5:
        andq %r13,%r13
        mrmovq 48(%rdi),%r14
        rmmovq %r14,48(%rsi)
        jle judge6
        iaddq $1,%rax
judge6:
        andq %r14,%r14
        mrmovq 56(%rdi),%rcx
        rmmovq %rcx,56(%rsi)
        jle judge7
        iaddq $1,%rax
judge7:
        andq %rcx,%rcx
        jle judgeEnd1 
        iaddq $1,%rax
judgeEnd1:
        iaddq $64,%rdi
        iaddq $64,%rsi
        iaddq $-8,%rdx
        jg handler1

break:
        addq %rdx,%rdx
        addq %rdx,%rdx
        addq %rdx,%rdx
        mrmovq Jump(%rdx),%r9
        pushq %r9
        ret

last8:
        mrmovq 56(%rdi),%r8
        rmmovq %r8,56(%rsi)
        andq %r8,%r8
        jle last7
        iaddq $1,%rax
last7:
        mrmovq 48(%rdi),%r8
        rmmovq %r8,48(%rsi)
        andq %r8,%r8
        jle last6
        iaddq $1,%rax
last6:
        mrmovq 40(%rdi),%r8
        rmmovq %r8,40(%rsi)
        andq %r8,%r8
        jle last5
        iaddq $1,%rax
last5:
        mrmovq 32(%rdi),%r8
        rmmovq %r8,32(%rsi)
        andq %r8,%r8
        jle last4
        iaddq $1,%rax
last4:
        mrmovq 24(%rdi),%r8
        rmmovq %r8,24(%rsi)
        andq %r8,%r8
        jle last3
        iaddq $1,%rax
last3:
        mrmovq 16(%rdi),%r8
        rmmovq %r8,16(%rsi)
        andq %r8,%r8
        jle last2
        iaddq $1,%rax
last2:
        mrmovq 8(%rdi),%r8
        rmmovq %r8,8(%rsi)
        andq %r8,%r8
        jle last1
        iaddq $1,%rax
last1:
        mrmovq (%rdi),%r8
        rmmovq %r8,(%rsi)
        andq %r8,%r8
        jle Done
        iaddq $1,%rax
last0:
        ret

JumpTable:
    .quad last0
    .quad last1
    .quad last2
    .quad last3
    .quad last4
    .quad last5
    .quad last6
    .quad last7
Jump:
    .quad last8
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
